Compiled from "SynchronizedInstruction.java"
public class cn.hdj.jvm.bytecode.SynchronizedInstruction {
  private java.lang.Object lock;
  public cn.hdj.jvm.bytecode.SynchronizedInstruction();
  void onlyMe(java.lang.Object);
}
Classfile /home/hdj/IDEA/Java-Learning/src/main/java/cn/hdj/jvm/bytecode/SynchronizedInstruction.class
  Last modified 2021-3-20; size 488 bytes
  MD5 checksum 1f6db0fa955b6d719018d2ea50e1e910
  Compiled from "SynchronizedInstruction.java"
public class cn.hdj.jvm.bytecode.SynchronizedInstruction
  SourceFile: "SynchronizedInstruction.java"
  minor version: 0
  major version: 51
  flags: ACC_PUBLIC, ACC_SUPER
Constant pool:
   #1 = Methodref          #2.#19         //  java/lang/Object."<init>":()V
   #2 = Class              #20            //  java/lang/Object
   #3 = Fieldref           #4.#21         //  cn/hdj/jvm/bytecode/SynchronizedInstruction.lock:Ljava/lang/Object;
   #4 = Class              #22            //  cn/hdj/jvm/bytecode/SynchronizedInstruction
   #5 = Utf8               lock
   #6 = Utf8               Ljava/lang/Object;
   #7 = Utf8               <init>
   #8 = Utf8               ()V
   #9 = Utf8               Code
  #10 = Utf8               LineNumberTable
  #11 = Utf8               onlyMe
  #12 = Utf8               (Ljava/lang/Object;)V
  #13 = Utf8               StackMapTable
  #14 = Class              #22            //  cn/hdj/jvm/bytecode/SynchronizedInstruction
  #15 = Class              #20            //  java/lang/Object
  #16 = Class              #23            //  java/lang/Throwable
  #17 = Utf8               SourceFile
  #18 = Utf8               SynchronizedInstruction.java
  #19 = NameAndType        #7:#8          //  "<init>":()V
  #20 = Utf8               java/lang/Object
  #21 = NameAndType        #5:#6          //  lock:Ljava/lang/Object;
  #22 = Utf8               cn/hdj/jvm/bytecode/SynchronizedInstruction
  #23 = Utf8               java/lang/Throwable
{
  private java.lang.Object lock;
    flags: ACC_PRIVATE

  public cn.hdj.jvm.bytecode.SynchronizedInstruction();
    flags: ACC_PUBLIC
    Code:
      stack=3, locals=1, args_size=1
         0: aload_0       
         1: invokespecial #1                  // Method java/lang/Object."<init>":()V
         4: aload_0       
         5: new           #2                  // class java/lang/Object
         8: dup           
         9: invokespecial #1                  // Method java/lang/Object."<init>":()V
        12: putfield      #3                  // Field lock:Ljava/lang/Object;
        15: return        
      LineNumberTable:
        line 8: 0
        line 9: 4

  void onlyMe(java.lang.Object);
    flags: 
    Code:
      stack=2, locals=4, args_size=2
         0: aload_1       //将lock对象入栈
         1: dup           //复制栈顶元素
         2: astore_2      //将栈顶元素存储到局部变量表Slot2中
         3: monitorenter  //以lock对象为锁，开始同步
         4: aload_2       //将局部变量表Slot2中元素入栈
         5: monitorexit   //退出同步
         6: goto          14  //程序正常结束，跳转到14返回
         9: astore_3      //从这步开始是异常路径，开下面的Exception table
        10: aload_2       //将局部变量表Slot2中元素入栈
        11: monitorexit   //退出同步
        12: aload_3       //将局部变量表Slot3中元素（异常对象）入栈
        13: athrow        //把异常对象重新抛出个onlyMe方法调用者
        14: return        //方法返回
      Exception table:
         from    to  target type
             4     6     9   any
             9    12     9   any
      LineNumberTable:
        line 11: 0
        line 13: 4
        line 14: 14
      StackMapTable: number_of_entries = 2
           frame_type = 255 /* full_frame */
          offset_delta = 9
          locals = [ class cn/hdj/jvm/bytecode/SynchronizedInstruction, class java/lang/Object, class java/lang/Object ]
          stack = [ class java/lang/Throwable ]
           frame_type = 250 /* chop */
          offset_delta = 4

}
